# adapted from:
# - https://github.com/matplotlib/matplotlib/blob/master/.github/workflows/cibuildwheel.yml
# - https://github.com/scikit-image/scikit-image/blob/master/.github/workflows/cibuildwheel.yml
# - https://github.com/pypa/cibuildwheel/blob/main/examples/github-deploy.yml

name: Build and upload to PyPI

on:
  push:
    branches:
      - wheels
    release:
      types:
        - published

jobs:
  build_wheels:
    name: Build ${{ matrix.py }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
        SETUPTOOLS_USE_DISTUTILS: stdlib
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-10.15]
        py: [cp36, cp37, cp38, cp39, cp310]

    steps:
      - uses: actions/checkout@v2
        name: Checkout repository

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.x'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Setup OpenMP (macOS)
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          brew config
          brew install libomp
          eval `brew shellenv`
          tee -a $GITHUB_ENV << END
          CC=/usr/bin/clang
          CXX=/usr/bin/clang++
          CFLAGS=${CFLAGS} -I${HOMEBREW_PREFIX}/include
          CXXFLAGS=${CXXFLAGS} -I${HOMEBREW_PREFIX}/include
          LDFLAGS=${LDFLAGS} -Wl,-rpath,${HOMEBREW_PREFIX}/lib -L${HOMEBREW_PREFIX}/lib -lomp
          END

      - name: Build wheels for CPython (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "${{ matrix.py }}-*"
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_BUILD_VERBOSITY: 1
          CIBW_TEST_REQUIRES: pytest tensorflow
          CIBW_TEST_COMMAND: pytest -v -m "not gpu" {project}
          CIBW_TEST_SKIP: "*cp36*-macosx*" # Python crashes ¯\_(ツ)_/¯

      - name: Build wheels for CPython (Linux and Windows)
        if: startsWith(matrix.os, 'macos') == false
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          # only build for platforms where tensorflow is available
          CIBW_BUILD: "${{ matrix.py }}-*{x86_64,win_amd64}"
          CIBW_SKIP: "*musllinux*"
          # numba is a requirement and only has wheels for manylinux2014
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_BUILD_VERBOSITY: 1
          CIBW_TEST_REQUIRES: pytest tensorflow
          CIBW_TEST_COMMAND: pytest -v -m "not gpu" {project}
          # CIBW_TEST_SKIP: "*musllinux*"

      - uses: actions/upload-artifact@v2
        name: Upload wheels
        with:
          name: dist
          path: ./dist/*.whl


  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Checkout repository

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v2
        name: Upload sdist
        with:
          name: dist
          path: dist/*.tar.gz


  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        name: Download wheels and sdist
        with:
          name: dist
          path: dist

      - name: Check that package version matches git tag ${{ github.ref_name }}
        shell: bash
        run: |
          ls -l dist
          test -f "dist/stardist-${{ github.ref_name }}.tar.gz"

      - uses: pypa/gh-action-pypi-publish@release/v1
        name: Publish to PyPI
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
          # password: ${{ secrets.TESTPYPI_API_TOKEN }}
          # repository_url: https://test.pypi.org/legacy/
